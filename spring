            IoC & DI
1.1.IoC（Inversion of Control，控制反转）
    控制反转不是一种技术，而是一种思想，一个重要的面向对象编程法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；而IoC把创建和查找依赖对象的控制权交给了第三方（一般为容器），由第三方进行注入组合对象，所以对象之间是松耦合关系，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。
   IoC是Spring的核心，就是由Spring来负责控制对象的生命周期和对象间的关系。Spring所倡导的开发方式就是如此，所有的类都会在Spring容器中登记，告诉Spring你是个什么东西，你需要什么东西，然后Spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由Spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是Spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被Spring控制，所以这叫控制反转。
1.2.DI（Dependency Injection，依赖注入）
    依赖注入即由容器在运行期间动态地将某个依赖关系注入到组件之中。更具体地说，即某个对象需要依赖其他对象才能正常运行，容器在运行过程中动态地向这个对象提供它所需要的其他对象。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。
    IoC和DI是同一个概念的不同角度描述：IoC视角为需要依赖其他对象的那个对象，而DI视角为向这个对象提供它所需要的其他对象的容器。
